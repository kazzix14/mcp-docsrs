name: Build Executables

on:
  workflow_call:

env:
  BUN_VERSION: '1.2.14'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GLIBC builds
          - os: ubuntu-latest
            target: linux-x64
            build-cmd: bun run build:linux-x64
          - os: ubuntu-latest
            target: linux-arm64
            build-cmd: bun run build:linux-arm64
          # Linux MUSL builds (for Alpine, containers, static linking)
          - os: ubuntu-latest
            target: linux-x64-musl
            build-cmd: bun run build:linux-x64-musl
          - os: ubuntu-latest
            target: linux-arm64-musl
            build-cmd: bun run build:linux-arm64-musl
          # macOS builds
          - os: macos-latest
            target: darwin-x64
            build-cmd: bun run build:darwin-x64
          - os: macos-latest
            target: darwin-arm64
            build-cmd: bun run build:darwin-arm64
          # Windows build
          - os: windows-latest
            target: windows-x64
            build-cmd: bun run build:windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-build-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-build-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build executable
        run: ${{ matrix.build-cmd }}


      - name: Test executable
        run: |
          if [ "${{ matrix.target }}" == "windows-x64" ]; then
            ./dist/mcp-docsrs-${{ matrix.target }}.exe --version
          else
            # For cross-compiled binaries, we can only test on matching architecture
            if [ "${{ matrix.os }}" == "ubuntu-latest" ] && [[ "${{ matrix.target }}" == *"linux"* ]]; then
              # Skip ARM64 tests on x64 runner
              if [[ "${{ matrix.target }}" != *"arm64"* ]]; then
                ./dist/mcp-docsrs-${{ matrix.target }} --version
              else
                echo "Skipping ARM64 binary test on x64 runner"
              fi
            elif [ "${{ matrix.os }}" == "macos-latest" ] && [[ "${{ matrix.target }}" == *"darwin"* ]]; then
              # macOS runners can test both x64 and arm64 binaries (Rosetta)
              ./dist/mcp-docsrs-${{ matrix.target }} --version
            elif [ "${{ matrix.os }}" == "windows-latest" ]; then
              ./dist/mcp-docsrs-${{ matrix.target }}.exe --version
            fi
          fi
        shell: bash

      - name: Calculate binary size
        id: binary-size
        run: |
          if [ "${{ matrix.target }}" == "windows-x64" ]; then
            SIZE=$(stat -c%s "./dist/mcp-docsrs-${{ matrix.target }}.exe" 2>/dev/null || stat -f%z "./dist/mcp-docsrs-${{ matrix.target }}.exe")
            echo "size=$SIZE" >> $GITHUB_OUTPUT
            echo "Binary size: $((SIZE / 1024 / 1024)) MB"
          else
            SIZE=$(stat -c%s "./dist/mcp-docsrs-${{ matrix.target }}" 2>/dev/null || stat -f%z "./dist/mcp-docsrs-${{ matrix.target }}")
            echo "size=$SIZE" >> $GITHUB_OUTPUT
            echo "Binary size: $((SIZE / 1024 / 1024)) MB"
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-docsrs-${{ matrix.target }}
          path: |
            dist/mcp-docsrs-${{ matrix.target }}*
          retention-days: 7

