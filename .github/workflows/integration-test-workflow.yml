name: Integration Tests

on:
  workflow_call:

env:
  BUN_VERSION: '1.2.14'

jobs:
  integration:
    name: Integration Tests - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test native binaries on their respective platforms
          - os: ubuntu-latest
            target: linux-x64
            artifact: mcp-docsrs-linux-x64
          - os: ubuntu-latest
            target: linux-x64-musl
            artifact: mcp-docsrs-linux-x64-musl
          - os: macos-latest
            target: darwin-x64
            artifact: mcp-docsrs-darwin-x64
          - os: macos-latest
            target: darwin-arm64
            artifact: mcp-docsrs-darwin-arm64
          - os: windows-latest
            target: windows-x64
            artifact: mcp-docsrs-windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/

      - name: Make executable
        if: matrix.os != 'windows-latest'
        run: chmod +x dist/${{ matrix.artifact }}

      - name: Test MCP server functionality
        run: |
          # Set executable name based on platform
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            EXECUTABLE="./dist/${{ matrix.artifact }}.exe"
          else
            EXECUTABLE="./dist/${{ matrix.artifact }}"
          fi
          
          # Test basic functionality
          $EXECUTABLE --version
          
          # Test with environment variables
          DB_PATH=":memory:" timeout 5s $EXECUTABLE || true
        shell: bash

      - name: Test cache functionality
        run: |
          # Create test script
          cat > test-cache.js << 'EOF'
          import { promises as fs } from 'fs';

          // Test cache directory creation
          const cacheDir = process.env.HOME + '/.mcp-docsrs';
          try {
            await fs.access(cacheDir);
            console.log('Cache directory check: PASS');
          } catch {
            console.log('Cache directory will be created on first use');
          }
          EOF

          bun test-cache.js

      - name: Test with sample crate lookup
        run: |
          # Set executable name based on platform
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            EXECUTABLE="./dist/${{ matrix.artifact }}.exe"
          else
            EXECUTABLE="./dist/${{ matrix.artifact }}"
          fi
          
          # Create integration test script
          cat > integration-test.js << 'EOF'
          import { spawn } from 'child_process';

          const executable = process.env.EXECUTABLE;
          const server = spawn(executable, [], {
            env: { ...process.env, DB_PATH: ':memory:' }
          });

          // Give server time to start
          await new Promise(resolve => setTimeout(resolve, 2000));

          // Test server is running
          console.log('MCP server started successfully');

          // Clean shutdown
          server.kill('SIGTERM');
          EOF

          EXECUTABLE=$EXECUTABLE bun integration-test.js
        shell: bash